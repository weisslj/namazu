dnl
dnl configure for Namazu
dnl $Id: configure.in,v 1.28 1999-09-06 13:19:10 rug Exp $
dnl
dnl Created  by Satoru Takabayashi <satoru@isoternet.org> [1998-10-09]
dnl Modified by SATOH Fumiyasu <fumiya@cij.co.jp> [1998-12-05]
dnl Modified by Satoru Takabayashi <satoru@isoternet.org> [1998-12-06]
dnl Modified by Hajime BABA <baba@kusastro.kyoto-u.ac.jp> [1999-02-02]
dnl Modified by NOKUBI Takatsugu <knok@daionet.gr.jp> [1999/06/22]
dnl

dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/cgi.c)
AM_INIT_AUTOMAKE(namazu, 1.9.2)

dnl This option requires config.guess, config.sub and install-sh
dnl AC_CANONICAL_SYSTEM

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

if test -n "$GCC"; then
    CFLAGS="$CFLAGS -Wall"
fi

dnl OS specific.
AC_EXEEXT
AC_OBJEXT

dnl Checks for libraries.
dnl Replace `main' with a function in -lm:
if test -z "$MINGW32"; then
	AC_CHECK_LIB(m, main)
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h unistd.h string.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_PID_T
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(re_comp memmove)

dnl Checks for external commands

AC_ARG_WITH(
	perl5,
	[  --with-perl5=PATH       set perl ver.5 interpreter location [search path]],
	AC_MSG_RESULT(using $with_perl5 for perl5)
	PERL=$with_perl5,
	[AC_PATH_PROGS(PERL, perl5 perl, no)]
)
if test $PERL = "no" || $PERL -e 'exit ($] >= 5)'; then
    AC_MSG_ERROR(perl(ver.5) interpreter required)
fi

AC_ARG_WITH(
	japanese,
	[  --without-japanese      don't handle Japanese code],
	[japanese=${withval}], [japanese='yes']
)

if test "${japanese}" = "no"; then
    # --without-japanese
    OPT_LANGUAGE=en
    TK_LANGUAGE=ENGLISH
    AC_SUBST(OPT_LANGUAGE)
    AC_SUBST(TK_LANGUAGE)
    OPT_WAKATI_DEFAULT="none"
else
    OPT_LANGUAGE=ja
    TK_LANGUAGE=JAPANESE
    AC_ARG_WITH(
	    lang,
	    [  --with-lang=language    set default LANGUAGE code (ja or en) [ja]],
	    OPT_LANGUAGE=$with_lang,
    )
    AC_SUBST(OPT_LANGUAGE)
    AC_SUBST(TK_LANGUAGE)

    AC_ARG_WITH(
	    nkf,
	    [  --with-nkf=PATH         set nkf command location [search path]],
	    NKF=$with_nkf
	    AC_MSG_RESULT(using $with_nkf for nkf),
	    if test -z "$NKF"; then
		AC_MSG_CHECKING(for NKF module)
		if $PERL -MNKF -e '' 1>/dev/null 2> /dev/null; then
		    NKF=module_nkf
		    AC_MSG_RESULT(yes)
		else
		    AC_MSG_RESULT(no)
		    [AC_PATH_PROG(NKF,nkf, no)] 
		fi
	    fi
    )
    if test "$NKF" = "no"; then
	AC_MSG_ERROR(NKF (network kanji filter) not found)
    fi

    AC_ARG_WITH(
	    kakasi,
	    [  --with-kakasi=PATH      set kakasi command location [search path]],
	    KAKASI=$with_kakasi
	    AC_MSG_RESULT(using $with_kakasi for kakasi),
	    if test -z "$KAKASI"; then
		AC_MSG_CHECKING(for Text::Kakasi module)
		if $PERL -MText::Kakasi -e '' 1>/dev/null 2> /dev/null; then
		    KAKASI=module_kakasi
		    AC_MSG_RESULT(yes)
		else
		    AC_MSG_RESULT(no)
		    [AC_PATH_PROG(KAKASI,kakasi, no)] 
		fi
	    fi
    )
    AC_ARG_WITH(
	    chasen,
	    [  --with-chasen=PATH      set chasen command location [search path]],
	    CHASEN=$with_chasen
	    AC_MSG_RESULT(using $with_chasen for chasen),
	    if test -z "$CHASEN"; then
		AC_MSG_CHECKING(for Text::ChaSen1 module)
		if $PERL -MText::ChaSen1 -e '' 1>/dev/null 2> /dev/null; then
		    CHASEN=module_chasen1
		    AC_MSG_RESULT(yes)
		else
		    AC_MSG_RESULT(no)
		    [AC_PATH_PROG(CHASEN,chasen, no)] 
		fi
	    fi
    )
    if test "$KAKASI" = "no" -a "$CHASEN" = "no"; then
	AC_MSG_ERROR(KAKASI or ChaSen required to handle Japanese code)
    fi

    AC_MSG_CHECKING(for default wakatigaki processor)
    OPT_WAKATI_DEFAULT=
    if test "$KAKASI" != "no"; then
	OPT_WAKATI_DEFAULT=KAKASI
    elif test "$CHASEN" != "no"; then
	OPT_WAKATI_DEFAULT=CHASEN
    fi
    AC_MSG_RESULT($OPT_WAKATI_DEFAULT)
fi
AC_SUBST(OPT_WAKATI_DEFAULT)


dnl *
dnl * Checking tknamazu
dnl *

AC_ARG_WITH(
	tknamazu,
	[  --with-tknamazu      build namazu with tcl/tk front-end ],
	[tknamazu=${withval}], [tknamazu='yes']
)

if test "${tknamazu}" = "no"; then
    TKNAMAZU = ""
else
    AC_ARG_WITH(
		wish,
		[  --with-wish=PATH       set wish location [search path]],
		AC_MSG_RESULT(using $with_wish for wish)
		WISH = $with_wish,
		dnl checking for wish (ugly)
		[AC_PATH_PROGS(WISH, wish8.2 wish8.1 wish8.0jp wish4.2jp wish, no)]
    )
    if test "$WISH" = "no"; then
        AC_MSG_WARN(*** wish not found\, tknamazu will not be built ***)
        TKNAMAZU=""
    else
        AC_ARG_WITH(
			lynx,
			[  --with-lynx=PATH       set lynx browser location [search path]],
			AC_MSG_RESULT(using $with_lynx for lynx)
			LYNX = $with_lynx,
			[AC_PATH_PROG(LYNX, lynx, no)]
        )
        if test "$LYNX" = "no"; then
            AC_MSG_WARN(*** lynx not found\, tknamazu will not be built ***)
            TKNAMAZU=""
        else
            TKNAMAZU="tknamazu"
        fi
    fi
fi
AC_SUBST(TKNAMAZU)

dnl additional helper programs
AC_ARG_WITH(
	groff,
	[  --with-groff=PATH       set groff location [search path]],
	AC_MSG_RESULT(using $with_groff for groff)
	GROFF = $with_groff,
	[AC_PATH_PROGS(GROFF, jgroff groff nroff, no)]
)
if test "$GROFF" = "no"; then
    AC_MSG_WARN(*** groff not found\, tknamazu cannot browse man pages ***)
fi
AC_ARG_WITH(
	info,
	[  --with-info=PATH       set info location [search path]],
	AC_MSG_RESULT(using $with_info for info)
	INFO = $with_info,
	[AC_PATH_PROG(INFO, info, no)]
)
if test "$INFO" = "no"; then
    AC_MSG_WARN(*** info not found\, tknamazu cannot browse info files ***)
fi
AC_ARG_WITH(
	zcat,
	[  --with-zcat=PATH       set zcat location [search path]],
	AC_MSG_RESULT(using $with_zcat for zcat)
	ZCAT = $with_zcat,
	[AC_PATH_PROG(ZCAT, zcat, no)]
)
if test "$ZCAT" = "no"; then
    AC_MSG_WARN(zcat not found)
fi



dnl *
dnl * Checking File::MMagic module
dnl *

changequote(<<, >>)
tmp=`$PERL -nle 'print \$1 if /^\\$VERSION = "([\d\.]+)";\$/' \
	File-MMagic/MMagic.pm`
dnl *
dnl * tmp="10.0"  # for testing
dnl *
AC_MSG_CHECKING(for File::MMagic module)
if $PERL -e "use File::MMagic $tmp" 1>/dev/null 2> /dev/null; then
    AC_MSG_RESULT(yes)
    FILE_MMAGIC=""
else
    AC_MSG_RESULT(no)
    AC_MSG_WARN(File::MMagic module not installed. preparing its Makefile.)
    cd File-MMagic
    $PERL Makefile.PL
    cd ..
    FILE_MMAGIC="File-MMagic"
fi
changequote([, ])
AC_SUBST(FILE_MMAGIC)


dnl *
dnl * Define the admin's email address
dnl * 

dnl *
dnl *  following code is imported from Apache's buildinfo.sh
dnl * 
dnl *  buildinfo.sh -- Determine Build Information
dnl *  Written by Ralf S. Engelschall <rse@apache.org>
dnl *
dnl *  determine hostname and domainname
dnl *

changequote(<<, >>)
#
#   determine hostname and domainname
#
hostname="`uname -n 2>/dev/null |\
           awk '{ printf("%s", $1); }'`"
if test "x$hostname" = "x"; then
    hostname="`hostname 2>/dev/null |\
               awk '{ printf("%s", $1); }'`"
    if test "x$hostname" = "x"; then
        hostname='unknown'
    fi
fi
case $hostname in
    *.* )
        domainname=".`echo $hostname | cut -d. -f2-`"
        hostname="`echo $hostname | cut -d. -f1`"
        ;;
esac
if test "x$domainname" = "x"; then
    if test -f /etc/resolv.conf; then
        domainname="`egrep '^[ 	]*domain' /etc/resolv.conf | head -1 |\
                     sed -e 's/.*domain//' \
                         -e 's/^[ 	]*//' -e 's/^ *//' -e 's/^	*//' \
                         -e 's/^\.//' -e 's/^/./' |\
                     awk '{ printf("%s", $1); }'`"
        if test "x$domainname" = "x"; then
            domainname="`egrep '^[ 	]*search' /etc/resolv.conf | head -1 |\
                         sed -e 's/.*search//' \
                             -e 's/^[ 	]*//' -e 's/^ *//' -e 's/^	*//' \
                             -e 's/ .*//' -e 's/	.*//' \
                             -e 's/^\.//' -e 's/^/./' |\
                         awk '{ printf("%s", $1); }'`"
        fi
    fi
fi
changequote([, ])

webmaster="webmaster@${hostname}${domainname}"
AC_MSG_CHECKING(for admin's email address)
AC_ARG_WITH(
	admin,
	[  --with-admin=EMAIL      set admin's email address [guessed]],
	[admin=${withval}], [admin=$webmaster]
)
AC_MSG_RESULT($admin)
OPT_ADMIN_EMAIL=$admin
AC_SUBST(OPT_ADMIN_EMAIL)

if test -n "$EMXOS2"; then
    CFLAGS="-O2 -m486 -Zmtd"
    LDFLAGS="-m486 -Zmtd -Zcrtdll -Zsysv-signals -Zbin-files"
fi


dnl *
dnl * Define a scoring method (default: TFIDF)
dnl *
AC_MSG_CHECKING(for a scoring method)
AC_ARG_WITH(scoring,
[  --with-scoring=METHOD   set scoring method (SIMPLE or TFIDF) [TFIDF]],
[case "${withval}" in
    SIMPLE|TFIDF) scoring="${withval}" ;;
    *) AC_MSG_ERROR(invalid value ${withval} for --with-scoring) ;;
esac], [scoring='TFIDF'])
AC_MSG_RESULT($scoring)
SCORING=$scoring
AC_SUBST(OPT_SCORING)

dnl *
dnl * Define a test mode (defult: off)
dnl *

AC_ARG_ENABLE(test,
[  --enable-test           enable a test mode [no]],
[case "${enableval}" in
   yes)	TEST_MODE=1 ;;
   no)	TEST_MODE=0 ;;
   *)	AC_MSG_ERROR(invalid value ${enableval} for --enable-test) ;;
esac], TEST_MODE=0)
AC_SUBST(TEST_MODE)



dnl *
dnl * Set default Namazu directories.
dnl * 
test "${prefix}" = NONE && prefix=/usr/local
pkgdatadir="$prefix/share/namazu"
AC_DEFINE_UNQUOTED(OPT_INDEXDIR, "${pkgdatadir}/index")
AC_DEFINE_UNQUOTED(OPT_NAMAZU_CONF, "${pkgdatadir}/lib/namazu.conf")
AC_DEFINE_UNQUOTED(OPT_LANGUAGE, "$OPT_LANGUAGE")
AC_DEFINE_UNQUOTED(OPT_SCORING, $SCORING)
AC_DEFINE(MSIE4MACFIX)

dnl * 
dnl * Output Files.
dnl * 
AM_CONFIG_HEADER(config.h)

AC_OUTPUT([Makefile src/Makefile conf/Makefile lib/var.pl lib/conf.pl
src/mknmz.pl src/gcnmz src/gtnmz src/mailutime namazu.spec tknamazu/Makefile tknamazu/tknamazu.tcl],
[chmod +x src/gcnmz src/gtnmz src/mailutime]) 

# Local Variables:
# mode:shell-script
# sh-indentation:2
# End:
