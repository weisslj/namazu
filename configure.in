dnl
dnl configure for Namazu
dnl $Id: configure.in,v 1.70 2000-01-05 12:59:02 rug Exp $
dnl
dnl Created  by Satoru Takabayashi <satoru@isoternet.org> [1998-10-09]
dnl Modified by SATOH Fumiyasu <fumiya@cij.co.jp> [1998-12-05]
dnl Modified by Satoru Takabayashi <satoru@isoternet.org> [1998-12-06]
dnl Modified by Hajime BABA <baba@kusastro.kyoto-u.ac.jp> [1999-02-02]
dnl Modified by NOKUBI Takatsugu <knok@daionet.gr.jp> [1999/06/22]
dnl

dnl *
dnl * Process this file with autoconf to produce a configure script.
dnl *
AC_INIT(src/cgi.c)
AC_PREREQ(2.13)               dnl Minimum Autoconf version required.
AM_INIT_AUTOMAKE(namazu, 1.9.12)
AM_MAINTAINER_MODE

dnl *
dnl * libtool
dnl *
AM_PROG_LIBTOOL

dnl This option requires config.guess, config.sub and install-sh
dnl AC_CANONICAL_SYSTEM

AC_ISC_POSIX

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_MAKE_SET

if test -n "$GCC"; then
    CFLAGS="$CFLAGS -Wall -pedantic"
fi

dnl OS specific.
AC_EXEEXT
AC_OBJEXT

if test -n "$EMXOS2"; then
    CFLAGS="$CFLAGS -Zmtd"
    LDFLAGS="$LDFLAGS -Zmtd -Zcrtdll -Zsysv-signals -Zbin-files"
fi

dnl *
dnl * I18N
dnl *
ALL_LINGUAS="ja ja_JP.SJIS ja_JP.ISO-2022-JP"
AM_GNU_GETTEXT

dnl Checks for libraries.
dnl Replace `main' with a function in -lm:
if test -z "$MINGW32"; then
	AC_CHECK_LIB(m, main)
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h unistd.h string.h)

AC_C_BIGENDIAN

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MMAP
AC_FUNC_MEMCMP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd getwd putenv setenv strdup strspn)
AC_REPLACE_FUNCS([memmove strcasecmp strncasecmp strcspn \
		strstr])
AC_CHECK_FUNCS([vsnprintf _vsnprintf])
if test $ac_cv_func_vsnprintf = no && test $ac_cv_func__vsnprintf = no; then
    LIBOBJS="$LIBOBJS vsnprintf.${ac_objext}"
fi


dnl for debugging.
AM_WITH_CCMALLOC

dnl *
dnl * Check File::MMagic module wheter to be build or not.
dnl *
AC_ARG_WITH(
    file-mmagic,
    [  --without-file-mmagic   do not build file-mmagic perl module ],
    [file_mmagic=${withval}], [file_mmagic='yes']
)

dnl *
dnl * Check tknamazu wheter to be build or not.
dnl *
AC_ARG_WITH(
    tknamazu,
    [  --without-tknamazu      do not build namazu with tcl/tk front-end ],
    [tknamazu=${withval}], [tknamazu='yes']
)

dnl *
dnl * Define the admin's email address
dnl * 

dnl *
dnl *  following code is imported from Apache's buildinfo.sh
dnl * 
dnl *  buildinfo.sh -- Determine Build Information
dnl *  Written by Ralf S. Engelschall <rse@apache.org>
dnl *
dnl *  determine hostname and domainname
dnl *

changequote(<<, >>)
#
#   determine hostname and domainname
#
hostname="`uname -n 2>/dev/null |\
           awk '{ printf("%s", $1); }'`"
if test "x$hostname" = "x"; then
    hostname="`hostname 2>/dev/null |\
               awk '{ printf("%s", $1); }'`"
    if test "x$hostname" = "x"; then
        hostname='unknown'
    fi
fi
case $hostname in
    *.* )
        domainname=".`echo $hostname | cut -d. -f2-`"
        hostname="`echo $hostname | cut -d. -f1`"
        ;;
esac
if test "x$domainname" = "x"; then
    if test -f /etc/resolv.conf; then
        domainname="`egrep '^[ 	]*domain' /etc/resolv.conf | head -1 |\
                     sed -e 's/.*domain//' \
                         -e 's/^[ 	]*//' -e 's/^ *//' -e 's/^	*//' \
                         -e 's/^\.//' -e 's/^/./' |\
                     awk '{ printf("%s", $1); }'`"
        if test "x$domainname" = "x"; then
            domainname="`egrep '^[ 	]*search' /etc/resolv.conf | head -1 |\
                         sed -e 's/.*search//' \
                             -e 's/^[ 	]*//' -e 's/^ *//' -e 's/^	*//' \
                             -e 's/ .*//' -e 's/	.*//' \
                             -e 's/^\.//' -e 's/^/./' |\
                         awk '{ printf("%s", $1); }'`"
        fi
    fi
fi
changequote([, ])

webmaster="webmaster@${hostname}${domainname}"
AC_MSG_CHECKING(for admin's email address)
AC_ARG_WITH(
    admin,
    [  --with-admin=EMAIL      set admin's email address [guessed]],
    [admin=${withval}], [admin=$webmaster]
)
AC_MSG_RESULT($admin)
OPT_ADMIN_EMAIL=$admin
AC_SUBST(OPT_ADMIN_EMAIL)

dnl *
dnl * Define a scoring method (default: TFIDF)
dnl *
AC_MSG_CHECKING(for a scoring method)
AC_ARG_WITH(scoring,
[  --with-scoring=METHOD   set scoring method (SIMPLE or TFIDF) [TFIDF]],
[case "${withval}" in
    SIMPLE|TFIDF) scoring="${withval}" ;;
    *) AC_MSG_ERROR(invalid value ${withval} for --with-scoring) ;;
esac], [scoring='TFIDF'])
AC_MSG_RESULT($scoring)
OPT_SCORING=$scoring
AC_SUBST(OPT_SCORING)

dnl *
dnl * Set a directory to install perl modules
dnl *
ADDITIONAL_INC="."  # default (dummy)
AC_ARG_WITH(
    pmdir,
    [  --with-pmdir=DIR        perl modules are in DIR [guessed]],
    [PMDIR=${withval}], [PMDIR='']
)
test "$PMDIR" && ADDITIONAL_INC="$PMDIR"
AC_SUBST(ADDITIONAL_INC)

dnl *
dnl * Checks for external commands
dnl *
AC_ARG_WITH(
    perl5,
    [  --with-perl5=PATH       set perl 5.004 or later location [search path]],
    AC_MSG_RESULT(using $with_perl5 for perl5)
    PERL=$with_perl5,
    [AC_PATH_PROGS(PERL, perl5 perl, no)]
)
if test $PERL = "no" || $PERL -e 'exit ($] >= 5.004)'; then
    AC_MSG_ERROR(perl 5.004 or later required)
fi

AC_ARG_WITH(
    nkf,
    [  --with-nkf=PATH         set nkf command location [search path]],
    NKF=$with_nkf
    AC_MSG_RESULT(using $with_nkf for nkf),
    if test -z "$NKF"; then
    AC_MSG_CHECKING(for NKF module)
        if $PERL -MNKF -e '' 1>/dev/null 2> /dev/null; then
            NKF=module_nkf
            AC_MSG_RESULT(yes)
        else
            AC_MSG_RESULT(no)
            [AC_PATH_PROG(NKF,nkf, no)] 
        fi
    fi
)
if test "$NKF" = "no"; then
    AC_MSG_WARN(NKF (network kanji filter) not found)
fi

AC_ARG_WITH(
    kakasi,
    [  --with-kakasi=PATH      set kakasi command location [search path]],
    KAKASI=$with_kakasi
    AC_MSG_RESULT(using $with_kakasi for kakasi),
    if test -z "$KAKASI"; then
        AC_MSG_CHECKING(for Text::Kakasi module)
        if $PERL -MText::Kakasi -e '' 1>/dev/null 2> /dev/null; then
            KAKASI=module_kakasi
            AC_MSG_RESULT(yes)
        else
            AC_MSG_RESULT(no)
            [AC_PATH_PROG(KAKASI,kakasi, no)] 
        fi
    fi
)

AC_ARG_WITH(
    chasen,
    [  --with-chasen=PATH      set chasen command location [search path]],
    CHASEN=$with_chasen
    AC_MSG_RESULT(using $with_chasen for chasen),
    if test -z "$CHASEN"; then
	AC_MSG_CHECKING(for Text::ChaSen module)
	if $PERL -MText::ChaSen -e '' 1>/dev/null 2> /dev/null; then
	    CHASEN=module_chasen
	    AC_MSG_RESULT(yes)
	else
	    AC_MSG_RESULT(no)
	    [AC_PATH_PROG(CHASEN,chasen, no)] 
	fi
    fi
)

if test "$KAKASI" = "no" -a "$CHASEN" = "no"; then
    AC_MSG_WARN(KAKASI or ChaSen are required to handle Japanese)
fi

AC_MSG_CHECKING(for default wakatigaki processor)
OPT_WAKATI_DEFAULT=none
if test "$KAKASI" != "no"; then
    OPT_WAKATI_DEFAULT=KAKASI
elif test "$CHASEN" != "no"; then
    OPT_WAKATI_DEFAULT=CHASEN
fi
AC_MSG_RESULT($OPT_WAKATI_DEFAULT)
AC_SUBST(OPT_WAKATI_DEFAULT)


dnl *
dnl * Preprocessing for tknamazu
dnl *

dnl * For determining namazu and mknmz pathnames
ac_cv_path_NAMAZU="$bindir/namazu"
ac_cv_path_MKNMZ="$bindir/mknmz"

if test "${tknamazu}" = "no"; then
    TKNAMAZU=""
else
    AC_ARG_WITH(
        wish,
        [  --with-wish=PATH        set wish location [search path]],
        AC_MSG_RESULT(using $with_wish for wish)
        WISH = $with_wish,
        dnl checking for wish (ugly)
        [AC_PATH_PROGS(WISH, wish8.0jp wish4.2jp wish8.2 wish8.1 wish, no)]
    )
    if test "$WISH" = "no"; then
        AC_MSG_WARN(wish not found: tknamazu will not be built)
        TKNAMAZU=""
    else
        AC_ARG_WITH(
	    lynx,
	    [  --with-lynx=PATH        set lynx browser location [search path]],
	    AC_MSG_RESULT(using $with_lynx for lynx)
	    LYNX = $with_lynx,
	    [AC_PATH_PROG(LYNX, lynx, no)]
        )
        if test "$LYNX" = "no"; then
            AC_MSG_WARN(lynx not found: tknamazu will not be built)
            TKNAMAZU=""
        else
            TKNAMAZU="tknamazu"
            AC_ARG_WITH(
		groff,
		[  --with-groff=PATH       set groff location [search path]],
		AC_MSG_RESULT(using $with_groff for groff)
		GROFF = $with_groff,
		[AC_PATH_PROGS(GROFF, jgroff groff nroff, no)]
            )
            if test "$GROFF" = "no"; then
                AC_MSG_WARN(groff not found: tknamazu cannot browse man pages)
            fi
            AC_ARG_WITH(
                info,
                [  --with-info=PATH        set info location [search path]],
                AC_MSG_RESULT(using $with_info for info)
                INFO = $with_info,
                [AC_PATH_PROG(INFO, info, no)]
            )
            if test "$INFO" = "no"; then
                AC_MSG_WARN(info not found: tknamazu cannot browse info files)
            fi
            AC_ARG_WITH(
                zcat,
                [  --with-zcat=PATH        set zcat location [search path]],
                AC_MSG_RESULT(using $with_zcat for zcat)
                ZCAT = $with_zcat,
                [AC_PATH_PROG(ZCAT, zcat, no)]
            )
            if test "$ZCAT" = "no"; then
                AC_MSG_WARN(zcat not found)
            fi
            AC_ARG_WITH(
                netscape,
                [  --with-netscape=PATH    set netscape location [search path]],
                AC_MSG_RESULT(using $with_netscape for netscape)
                NETSCAPE = $with_netscape,
                [AC_PATH_PROG(NETSCAPE, netscape, no)]
            )
            if test "$NETSCAPE" = "no"; then
            AC_MSG_WARN(netscape not found)
            fi
        fi
    fi
fi
AC_SUBST(TKNAMAZU)
AC_CONFIG_SUBDIRS($TKNAMAZU)


dnl *
dnl * Preprocessing for File::MMagic
dnl *
if test "${file_mmagic}" = "no"; then
    FILE_MMAGIC=""
else
    changequote(<<, >>)
    tmp=`$PERL -nle 'print \$1 if /^\\$VERSION = \"([\d\.]+)\";\$/' \
    	File-MMagic/MMagic.pm`
    # tmp="10.0"  # for testing
    AC_MSG_CHECKING(for File::MMagic module)

    FILE_MMAGIC=""
    if $PERL -e "use lib '$PMDIR'; use File::MMagic $tmp" \
    1>/dev/null 2> /dev/null; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
        AC_MSG_WARN(File::MMagic module not installed. preparing its Makefile.)
        cd File-MMagic
        if test -z "$PMDIR"; then
            $PERL Makefile.PL
        else
            $PERL Makefile.PL LIB=$PMDIR
        fi

	# To prevent to remove Makefile when doing 'make clean'
	grep -v '^	-mv Makefile Makefile\.old \$(DEV_NULL)' \
	Makefile > Makefile.tmp
	mv Makefile.tmp Makefile

        cd ..
        FILE_MMAGIC="File-MMagic"
    fi
    changequote([, ])
fi
AC_SUBST(FILE_MMAGIC)

dnl *
dnl * Check for Emacs and where to install .elc files.
dnl *
AM_PATH_LISPDIR

dnl *
dnl * Set default behavior
dnl * 
AC_DEFINE_UNQUOTED(OPT_SCORING, $OPT_SCORING)
AC_DEFINE(MSIE4MACFIX)

dnl *
dnl * Namazu's website URL
dnl * 
OPT_NMZ_URI="http://openlab.ring.gr.jp/namazu/"
AC_SUBST(OPT_NMZ_URI)

dnl * 
dnl * Output Files.
dnl * 
AM_CONFIG_HEADER(config.h)

AC_OUTPUT([Makefile
	   nmz-config
	   namazu.spec
	   conf/Makefile 
	   filter/Makefile
	   intl/Makefile 
	   lib/Makefile
	   nmz/Makefile
	   lisp/Makefile
	   pl/Makefile
	   man/Makefile 
	   pl/var.pl
	   pl/conf.pl
	   po/Makefile.in
	   po/make_iso-2022-jp_po
	   scripts/Makefile 
	   scripts/mknmz.pl
	   scripts/gcnmz.pl
	   scripts/gtnmz
	   scripts/vfnmz
	   scripts/kwnmz.pl
	   scripts/mailutime
	   scripts/nmzgrep
	   scripts/bnamazu
	   src/Makefile
	   template/Makefile
	   template/NMZ.head
	   template/NMZ.foot
	   template/NMZ.head.ja
	   template/NMZ.foot.ja
	  ],
	  [chmod +x nmz-config \
		    scripts/gtnmz \
		    scripts/mailutime \
		    scripts/nmzgrep \
		    scripts/vfnmz \
		    scripts/bnamazu \
		    po/make_iso-2022-jp_po]) 

# Local Variables:
# mode:shell-script
# sh-indentation:4
# End:
