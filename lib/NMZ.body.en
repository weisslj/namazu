
<h2>How to search</h2>


<p>
 This search system is case insensitive. You can use asterisk
 character at the end of the word to do forward match search, 
 for instance: "foo*"
</p>

<p>
 Separating keywords by spaces is automatically assumed to be
 AND-search that is to find only documents containing all of the
 specified keywords.
</p>

<p>
 You can search the word containing symbols like "TCP/IP".
 However, this processing isn't perfect, so you can describe "TCP
 IP" instead of "TCP/IP", but it may cause noisy results.
</p>

<p>
 This search system has boolean operators '&amp;', '!', '|'.
 In place of symbols, the word "and", "or", "not", are accepted.
 Each operator must be separated by space.
</p>

<p>
 For exapmle (both expressions is same meaning):
</p>

<ul>
<li><code>( sed | awk ) ! perl &amp; regexp</code>
<li><code>( sed or awk ) not perl and regexp</code>
</ul>

<p>
 This sample finds the files which contain "sed" or "awk", and no "perl",
 but include "regexp".
</p>

<p>
 You can use nested parenthesises expression for advanced search.
</p>

<p>
By surronding words with double quotation mark '"' or curly brace '{' '}',
Namazu would recognize it as phrase but it is not perfect precision, so
it cause wrong hit occasionally.
</p>

<p>
 For exapmle (both expressions is same meaning):
</p>

<ul>
<li><code>"SIMPLE MAIL TRANSFER PROTOCOL"</code>
<li><code>{SIMPLE MAIL TRANSFER PROTOCOL}</code>
</ul>

<p>Also, Namazu can do "regular expression search", "middle or backward match search" but it's little slow.</p>

<p>
For exapmle:
</p>

<ul>
<li><code>*net</code> (backward match)
<li><code>*foo*</code>  (middle match)
<li><code>/(foo|bar)[a-z]+/</code> (regular expression)
<li><code>"rain dance"</code> (phrase)
</ul>

<p>You can do 'field specified search' as well if indices are prepared.</p>

<ul>
<li><code>+date:/Aug 1998/</code> (something dated on 'Aug 1998')
<li><code>+from:foo@bar.jp</code>  (article by foo@bar.jp)
<li><code>+subject:"internet message"</code>  (search a string for Subject:)
<li><code>+subject:"(mule|xemacs|emacs)"</code>  (search a string for Subject: with regex)
<li><code>+message-id:&lt;199801240555.OAA18737@foo.bar.jp&gt;</code>  (Message-Id)
<li><code>+title:amarok</code> (title of document)
<li><code>+author:foo@bar.jp</code>  (author of document)
<li><code>+url:http://foo.bar.jp/</code>  (URI of document)
</ul>

<p>
 Happy searching!
</p>

