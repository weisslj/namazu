#! @PERL@
#
# wdnmz - program to output words list from index
# Version 1.0.8    [02/13/1999]
#
# Copyright (C) 1997-1999 Satoru Takabayashi  All rights reserved.
#     This is free software with ABSOLUTELY NO WARRANTY.
#

$VERSION = "1.0.8";
$COPYRIGHT = "Copyright (C) 1997-1998 Satoru Takabayashi  All rights reserved.";

$SYSTEM = $^O;
$LANGUAGE = "%OPT_LANGUAGE%";  # language of messages

$USAGE  = <<EOFusage;
  wdnmz v$VERSION - program to output list of words from index
  $COPYRIGHT

  usage: wdnmz [-iw] NMZ.i
    (default): 'word'  TAB 'count of the word in index'
         -w: output list of words for regex search
         -i: using NMZ.ii to process
  usually use: % wdnmz -w NMZ.i > NMZ.w)

EOFusage

main();

sub main {
    while ($ARGV[0] =~ /^-/) {
	$opt_wordlist = 1 if $ARGV[0] =~ /w/;;
	$opt_with_nmz_ii = 1 if $ARGV[0] =~ /i/;;
	shift(@ARGV);
    }

    die &usage if @ARGV == 0;
    $OBJFILE = shift (@ARGV);
    
    open(OBJFILE, $OBJFILE) || die "Can't open $OBJFILE!\n";
    binmode(OBJFILE);
    &getintsize;
    if ($opt_with_nmz_ii) {
	open(IDXFILE, $OBJFILE . "i") || die "Can't open $OBJFILEi!\n";
	binmode(IDXFILE);
	while (read(IDXFILE, $idx, $INTSIZE)) {
	    $idx = unpack("I", $idx);
	    seek(OBJFILE, $idx, 0);
	    $_ = <OBJFILE>;
	    read(OBJFILE, $n, $INTSIZE);
	    $nn = unpack("I", $n);
	    chop;
	    $nn /= 2;
	    if ($opt_wordlist) {
		Print("$_\n");
	    } else {
		Print("$_\t$nn\n");
	    }
	}
    } else {
	while(<OBJFILE>) {
	    read(OBJFILE, $n, $INTSIZE);
	    $nn = unpack("I", $n);
	    read(OBJFILE, $dummy, $INTSIZE * $nn);
	    <OBJFILE>;

	    chop;
	    $nn /= 2;
	    if ($opt_wordlist) {
		Print("$_\n");
	    } else {
		Print("$_\t$nn\n");
	    }
	}
    }
}

sub Print () {
    my ($str) = @_;
    if ($LANGUAGE eq "ja" && ($SYSTEM eq "MSWin32") || ($SYSTEM eq "os2")) {
	$str = eucjp_to_shiftjis($str);
    }
    print $str;
}

sub usage () {
    print STDERR $USAGE;
    exit;
}

# checke the size of int
sub getintsize {
    $tmp = 0;
    $tmp = pack( "I", $tmp );
    $INTSIZE = length( $tmp );
}

sub eucjp_to_shiftjis ($) {
    my ($str) = @_;
    $str =~ s/([\xa1-\xfe])([\xa1-\xfe])/etos($1, $2)/ge;
    return $str;
}

sub etos($) {
    my($c1, $c2) = @_;

    $c1 = ord($c1) & 0x7f;
    $c2 = ord($c2) & 0x7f;

    if ($c1 & 1) {
        $c1 = ($c1 >> 1) + 0x71;
        $c2 += 0x1f;
        $c2++ if $c2 >= 0x7f;
    } else {
        $c1 = ($c1 >> 1) + 0x70;
        $c2 += 0x7e;
    }
    $c1 += 0x40 if $c1 > 0x9f;

    return chr($c1) . chr($c2);
}

